// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySiteDAL;

#nullable disable

namespace MySiteDAL.Migrations
{
    [DbContext(typeof(MySiteContext))]
    [Migration("20221108101611_Initial3")]
    partial class Initial3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MySiteBL.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            url = "http://blogs.packtpub.com/dotnet"
                        },
                        new
                        {
                            BlogId = 2,
                            url = "http://blogs.packtpub.com/dotnetcore"
                        });
                });

            modelBuilder.Entity("MySiteBL.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Author = "Packt",
                            Content = "Dotnet 4.7 Released Contents",
                            PostId = 1,
                            Title = "Dotnet 4.7 Released"
                        },
                        new
                        {
                            CommentId = 2,
                            Author = "Packt",
                            Content = "Dotnet 4.8 Released Contents",
                            PostId = 1,
                            Title = "Dotnet 4.8 Released"
                        },
                        new
                        {
                            CommentId = 3,
                            Author = "Packt",
                            Content = "Dotnet 4.7 Released Contents",
                            PostId = 2,
                            Title = "Dotnet 4.7 Released"
                        });
                });

            modelBuilder.Entity("MySiteBL.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            BlogId = 1,
                            Content = "Dotnet 4.7 Released Contents",
                            PublishedDateTime = new DateTime(2022, 11, 8, 11, 16, 10, 954, DateTimeKind.Local).AddTicks(9040),
                            Title = "Dotnet 4.7 Released"
                        },
                        new
                        {
                            PostId = 2,
                            BlogId = 1,
                            Content = "Dotnet 4.8 Released Contents",
                            PublishedDateTime = new DateTime(2022, 11, 8, 11, 16, 10, 954, DateTimeKind.Local).AddTicks(9075),
                            Title = "Dotnet 4.8 Released"
                        },
                        new
                        {
                            PostId = 3,
                            BlogId = 2,
                            Content = "testContent",
                            PublishedDateTime = new DateTime(2022, 11, 8, 11, 16, 10, 954, DateTimeKind.Local).AddTicks(9076),
                            Title = "testTitle"
                        });
                });

            modelBuilder.Entity("MySiteBL.Entities.Comment", b =>
                {
                    b.HasOne("MySiteBL.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MySiteBL.Entities.Post", b =>
                {
                    b.HasOne("MySiteBL.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("MySiteBL.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
